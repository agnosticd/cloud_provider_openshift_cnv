---
- name: Create routes with tls
  when: route.tls | default(false) | bool
  kubernetes.core.k8s:
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        name: "{{ route.name }}"
        namespace: "{{ openshift_cnv_namespace }}"
      spec:
        host: >-
          {{
            (route.host | default(route.name) ~ '.' ~ guid ~ '.' ~ sandbox_openshift_apps_domain)
            if (openshift_cnv_legacy_routes | default(false) and route.legacy | default(true)) or route.legacy | default(false)
            else
            (route.host | default(route.name) ~ '-' ~ guid ~ '.' ~ sandbox_openshift_apps_domain)
          }}
        port:
          targetPort: "{{ route.targetPort }}"
        tls:
          termination: "{{ route.tls_termination | default('passthrough') }}"
          insecureEdgeTerminationPolicy: None
          destinationCACertificate: "{{ route.tls_destinationCACertificate | default('') }}"
        to:
          kind: Service
          name: "{{ route.service }}"
        httpHeaders: "{{ (openshift_cnv_route_remove_x_frame_options_header and route.tls_termination | default('passthrough') != 'passthrough') | ternary({'actions': {'response': [{'name': 'X-Frame-Options', 'action': {'type': 'Delete'}}]}}, omit) }}"
  loop: "{{ _instance.routes | default([]) }}"
  loop_control:
    loop_var: route
  register: r_createroute
  until: r_createroute is success
  retries: "{{ openshift_cnv_retries }}"
  delay: "{{ openshift_cnv_delay }}"

- name: Create routes without tls
  when: not route.tls | default(false) | bool
  kubernetes.core.k8s:
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        name: "{{ route.name }}"
        namespace: "{{ openshift_cnv_namespace }}"
      spec:
        host: >-
          {{
            (route.host | default(route.name) ~ '.' ~ guid ~ '.' ~ sandbox_openshift_apps_domain)
            if openshift_cnv_legacy_routes | default(false)
            else
            (route.host | default(route.name) ~ '-' ~ guid ~ '.' ~ sandbox_openshift_apps_domain)
          }}
        path: "{{ route.path | default('/') }}"
        port:
          targetPort: "{{ route.targetPort }}"
        to:
          kind: Service
          name: "{{ route.service }}"
        httpHeaders: "{{ (openshift_cnv_route_remove_x_frame_options_header) | ternary({'actions': {'response': [{'name': 'X-Frame-Options', 'action': {'type': 'Delete'}}]}}, omit) }}"
  loop: "{{ _instance.routes | default([]) }}"
  loop_control:
    loop_var: route
  register: r_createroute
  until: r_createroute is success
  retries: "{{ openshift_cnv_retries }}"
  delay: "{{ openshift_cnv_delay }}"
